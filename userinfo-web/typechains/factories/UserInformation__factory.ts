/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UserInformation,
  UserInformationInterface,
} from "../UserInformation";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "firstname",
        type: "string",
      },
      {
        internalType: "string",
        name: "lastname",
        type: "string",
      },
      {
        internalType: "string",
        name: "email",
        type: "string",
      },
    ],
    name: "addUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllUsers",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "firstname",
            type: "string",
          },
          {
            internalType: "string",
            name: "lastname",
            type: "string",
          },
          {
            internalType: "string",
            name: "email",
            type: "string",
          },
        ],
        internalType: "struct UserInformation.User[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLength",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "idx",
        type: "uint256",
      },
    ],
    name: "getUser",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "firstname",
            type: "string",
          },
          {
            internalType: "string",
            name: "lastname",
            type: "string",
          },
          {
            internalType: "string",
            name: "email",
            type: "string",
          },
        ],
        internalType: "struct UserInformation.User",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "idx",
        type: "uint256",
      },
    ],
    name: "removeUser",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610eb0806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c806311dc47031461005c57806395c5fed414610078578063b0467deb14610094578063be1c766b146100c4578063e2842d79146100e2575b600080fd5b610076600480360381019061007191906109ac565b610100565b005b610092600480360381019061008d9190610905565b610227565b005b6100ae60048036038101906100a991906109ac565b6102cb565b6040516100bb9190610b88565b60405180910390f35b6100cc6104ce565b6040516100d99190610baa565b60405180910390f35b6100ea6104da565b6040516100f79190610b66565b60405180910390f35b600080549050811061011157600080fd5b600060016000805490506101259190610c70565b8154811061013657610135610de0565b5b90600052602060002090600302016000828154811061015857610157610de0565b5b9060005260206000209060030201600082018160000190805461017a90610cf0565b6101859291906106ef565b50600182018160010190805461019a90610cf0565b6101a59291906106ef565b5060028201816002019080546101ba90610cf0565b6101c59291906106ef565b5090505060008054806101db576101da610db1565b5b600190038181906000526020600020906003020160008082016000610200919061077c565b600182016000610210919061077c565b600282016000610220919061077c565b5050905550565b6000604051806060016040528085815260200184815260200183815250908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190805190602001906102899291906107bc565b5060208201518160010190805190602001906102a69291906107bc565b5060408201518160020190805190602001906102c39291906107bc565b505050505050565b6102d3610842565b60008054905082106102e457600080fd5b600082815481106102f8576102f7610de0565b5b906000526020600020906003020160405180606001604052908160008201805461032190610cf0565b80601f016020809104026020016040519081016040528092919081815260200182805461034d90610cf0565b801561039a5780601f1061036f5761010080835404028352916020019161039a565b820191906000526020600020905b81548152906001019060200180831161037d57829003601f168201915b505050505081526020016001820180546103b390610cf0565b80601f01602080910402602001604051908101604052809291908181526020018280546103df90610cf0565b801561042c5780601f106104015761010080835404028352916020019161042c565b820191906000526020600020905b81548152906001019060200180831161040f57829003601f168201915b5050505050815260200160028201805461044590610cf0565b80601f016020809104026020016040519081016040528092919081815260200182805461047190610cf0565b80156104be5780601f10610493576101008083540402835291602001916104be565b820191906000526020600020905b8154815290600101906020018083116104a157829003601f168201915b5050505050815250509050919050565b60008080549050905090565b60606000805480602002602001604051908101604052809291908181526020016000905b828210156106e6578382906000526020600020906003020160405180606001604052908160008201805461053190610cf0565b80601f016020809104026020016040519081016040528092919081815260200182805461055d90610cf0565b80156105aa5780601f1061057f576101008083540402835291602001916105aa565b820191906000526020600020905b81548152906001019060200180831161058d57829003601f168201915b505050505081526020016001820180546105c390610cf0565b80601f01602080910402602001604051908101604052809291908181526020018280546105ef90610cf0565b801561063c5780601f106106115761010080835404028352916020019161063c565b820191906000526020600020905b81548152906001019060200180831161061f57829003601f168201915b5050505050815260200160028201805461065590610cf0565b80601f016020809104026020016040519081016040528092919081815260200182805461068190610cf0565b80156106ce5780601f106106a3576101008083540402835291602001916106ce565b820191906000526020600020905b8154815290600101906020018083116106b157829003601f168201915b505050505081525050815260200190600101906104fe565b50505050905090565b8280546106fb90610cf0565b90600052602060002090601f01602090048101928261071d576000855561076b565b82601f1061072e578054855561076b565b8280016001018555821561076b57600052602060002091601f016020900482015b8281111561076a57825482559160010191906001019061074f565b5b5090506107789190610863565b5090565b50805461078890610cf0565b6000825580601f1061079a57506107b9565b601f0160209004906000526020600020908101906107b89190610863565b5b50565b8280546107c890610cf0565b90600052602060002090601f0160209004810192826107ea5760008555610831565b82601f1061080357805160ff1916838001178555610831565b82800160010185558215610831579182015b82811115610830578251825591602001919060010190610815565b5b50905061083e9190610863565b5090565b60405180606001604052806060815260200160608152602001606081525090565b5b8082111561087c576000816000905550600101610864565b5090565b600061089361088e84610bea565b610bc5565b9050828152602081018484840111156108af576108ae610e43565b5b6108ba848285610cae565b509392505050565b600082601f8301126108d7576108d6610e3e565b5b81356108e7848260208601610880565b91505092915050565b6000813590506108ff81610e63565b92915050565b60008060006060848603121561091e5761091d610e4d565b5b600084013567ffffffffffffffff81111561093c5761093b610e48565b5b610948868287016108c2565b935050602084013567ffffffffffffffff81111561096957610968610e48565b5b610975868287016108c2565b925050604084013567ffffffffffffffff81111561099657610995610e48565b5b6109a2868287016108c2565b9150509250925092565b6000602082840312156109c2576109c1610e4d565b5b60006109d0848285016108f0565b91505092915050565b60006109e58383610a9b565b905092915050565b60006109f882610c2b565b610a028185610c4e565b935083602082028501610a1485610c1b565b8060005b85811015610a505784840389528151610a3185826109d9565b9450610a3c83610c41565b925060208a01995050600181019050610a18565b50829750879550505050505092915050565b6000610a6d82610c36565b610a778185610c5f565b9350610a87818560208601610cbd565b610a9081610e52565b840191505092915050565b60006060830160008301518482036000860152610ab88282610a62565b91505060208301518482036020860152610ad28282610a62565b91505060408301518482036040860152610aec8282610a62565b9150508091505092915050565b60006060830160008301518482036000860152610b168282610a62565b91505060208301518482036020860152610b308282610a62565b91505060408301518482036040860152610b4a8282610a62565b9150508091505092915050565b610b6081610ca4565b82525050565b60006020820190508181036000830152610b8081846109ed565b905092915050565b60006020820190508181036000830152610ba28184610af9565b905092915050565b6000602082019050610bbf6000830184610b57565b92915050565b6000610bcf610be0565b9050610bdb8282610d22565b919050565b6000604051905090565b600067ffffffffffffffff821115610c0557610c04610e0f565b5b610c0e82610e52565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b6000610c7b82610ca4565b9150610c8683610ca4565b925082821015610c9957610c98610d53565b5b828203905092915050565b6000819050919050565b82818337600083830152505050565b60005b83811015610cdb578082015181840152602081019050610cc0565b83811115610cea576000848401525b50505050565b60006002820490506001821680610d0857607f821691505b60208210811415610d1c57610d1b610d82565b5b50919050565b610d2b82610e52565b810181811067ffffffffffffffff82111715610d4a57610d49610e0f565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b610e6c81610ca4565b8114610e7757600080fd5b5056fea26469706673582212205399590303a3b655143c7bae6dae78c9b1cab223a28644befcd0afbcef21511f64736f6c63430008060033";

type UserInformationConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UserInformationConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UserInformation__factory extends ContractFactory {
  constructor(...args: UserInformationConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UserInformation";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UserInformation> {
    return super.deploy(overrides || {}) as Promise<UserInformation>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): UserInformation {
    return super.attach(address) as UserInformation;
  }
  connect(signer: Signer): UserInformation__factory {
    return super.connect(signer) as UserInformation__factory;
  }
  static readonly contractName: "UserInformation";
  public readonly contractName: "UserInformation";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UserInformationInterface {
    return new utils.Interface(_abi) as UserInformationInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UserInformation {
    return new Contract(address, _abi, signerOrProvider) as UserInformation;
  }
}
